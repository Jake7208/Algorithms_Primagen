Another Big O trick 
if the input halves at each step, it's either O(LogN) or O(NlogN)
look at a value divide it in half

The Two crystal ball problem

Given two crystal balls that will break if dropped from a high enough 
distance, determine the exact spot in which it will break in the most
optimized way

Linear and binary searching?

Sort 

The bubble sort?
after doing a bubble sort 1 time it will always produce the largest item at the last spot

you will drop insignificant values

Recursion

Sorting strategies 



What sucks about arrays??
deletion: you can't delete you can zero out
insertion: you can't really insert you can write
it's ungrowable: you can't grow an array


1st real data structure? 
linked list how it works? node that contains a value and a reference to another value/node.

singly linked list: you can't walk backwards if you don't have a reference to whats behind you it's gone! (the data gone aka dead)

doubly linked list: normally have a additional property adding bi-directional arrows. (often called a container) needs ability to store values from linked list.

time / space complexity
 a. prepend/ append
 b. insertion in  the middle
 c. deletion from ends
 d. deletion from middle
 e. Get head/tail
 f. get in general

api

kata-machine api before programmed 

interface LinkedList<T> {
    get length(): number;
    insertAt(item: T, index: number): void;
    remove(item: T): T | undefined;
    removeAt(index: number): T | undefined;
    append(item: T): void;
    prepend(item: T): void;
    get(index: number): T | undefined;
}

Every linked is a graph or a tree most fundamental unit.( must understand to do algorithm )

first data structure on top of linked list: is a queue!

1st in 1st out queue

running time
enqueue
dequeue
peek or your head.value

you only add or remove from the head

Arrays vs linked list
Usability 
Time 
space (interbound)

always O of 1 time for an array

array memory is always there.

linked list always will use less memory than an array

how would you traverse a linked list?? 

Can we have an array access with the ability to grow.

what data structure is a = []

Recursion is hard 
example of Recursion

function foo(n: number): number {
    // base case
    if (n == 1) {
        return 1;
    }

    // We shall recurse!
    return n + foo(n - 1);
}

Know your base case if you understand base case it's easy

implement recursion

all programming eventually leads to trees.

Where are trees?

Binary search tree BST 

the heap data structure

the simplest6 way to put it is a binary tree where every child and grand child is smaller (maxHeap), or larger (minHeap) Than current node.


MinHeap Means root is larger than the current node

Max heap meaning that the smallest value is the root and gets larger than the previous child

every node below said node is smaller than or = to current node.

A heap is normally a full or complete tree meaning there is no empty space.

every node is always filled in from the left to the right is always complete.

heaps are self balancing and also the easiest to get wrong! so be careful when implenting a heap

The most bestest data structure? graphs
graphs

a graph is a series of nodes with a large amounts of connections

adj, list and matrix work the same as trees when it comes to bfs and Depth first search

dijkstra's shortest path

path requires a previous path.

started off as a v squared running time

prev = [-1...] 
seen = [f....]
distance = [infinity..... 0]
put zero where ever source is

it works by getting the nearest unseen node, so source array

the smallest unseen item

while has Unvisited() {
    lo = getLowestUnseen()
    seen[lo] = true

    for edge in lo {
        if seen [edge] continue
        // meaning haven't seen this node continue 
        dist = dist[lo] + edge.weight
        if dist < dist[edge] {
            prev [edge] = lo
            dist[edge] = dist

        }
    }
}

constantly finds the lowest/shortest path


running time for dijkstras is odd
O(logV(V+E))

Maps are just array lists

Map consistant hash

K => V 

smaller load factor with more storage back in the primagens day

hashing function 
hash(key) => number {

}

ideal load factor is .7 after load factor is exceeded need to be rehash and re store them

LRU
Least recently used item
